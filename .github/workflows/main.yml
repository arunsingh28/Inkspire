name: Inkspire Backend CI
"on":
  push:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted
    strategy:
      matrix:
        node-version:
          - 18.x
    steps:
      - name: Clean up stale Git lock files
        run: |
          if [ -f .git/index.lock ]; then
            echo "Removing stale Git lock file..."
            rm -f .git/index.lock
          fi
      - uses: actions/checkout@cbb722410c2e876e24abbe8de2cc27693e501dcb
      - name: Verify action integrity
        run: >
          echo "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
          actions/checkout@cbb722410c2e876e24abbe8de2cc27693e501dcb" | sha256sum

      - name: "Use Node.js ${{ matrix.node-version }} for backend"
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af
        with:
          node-version: "${{ matrix.node-version }}"
          cache: "pnpm"
          cache-dependency-path: server/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: server
        run: pnpm install --frozen-lockfile

      - name: Create .env file
        working-directory: server
        run: |
          touch .env
          echo "${{ secrets.PROD }}" > .env

      - name: Build project
        working-directory: server
        run: pnpm build

      - name: Start project with PM2
        working-directory: server
        run: pm2 reload server

      # frontend
      - name: "Use Node.js ${{ matrix.node-version }} for frontend"
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af
        with:
          node-version: "${{ matrix.node-version }}"
          cache: "pnpm"
          cache-dependency-path: client/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: client
        run: pnpm install --frozen-lockfile

      - name: Build project
        working-directory: client
        run: pnpm build

      - name: Install AWS CLI
        id: check-aws-cli
        run: |
          # Install unzip if not already installed
          if ! command -v unzip &> /dev/null; then
            echo "unzip not found. Installing..."
            sudo apt-get update && sudo apt-get install -y unzip
          fi

          if ! command -v aws &> /dev/null; then
            echo "AWS CLI not found. Installing..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          else
            echo "AWS CLI is already installed."
          fi

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      # Sync Frontend to S3 Bucket (into /app folder)
      - name: Deploy Frontend to S3 (into /app folder)
        run: |
          aws s3 sync frontend/dist/ s3://project-inkspire-blog/app/ --delete --acl public-read --exact-timestamps

      # Invalidate CloudFront Cache (Optional)
      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/app/*"
